<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Emjay&#39;s DailyCommit Blog</title>
  
  <subtitle>Emjay&#39;s DataScience &amp; Development</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://emjayahn.github.io/"/>
  <updated>2018-10-31T14:27:39.155Z</updated>
  <id>https://emjayahn.github.io/</id>
  
  <author>
    <name>EmjayAhn(Minjae Ahn)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>181031-TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/31/181031-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/31/181031-TodayWhatILearned/</id>
    <published>2018-10-31T14:17:59.000Z</published>
    <updated>2018-10-31T14:27:39.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181031-TWIL"><a href="#181031-TWIL" class="headerlink" title="181031 TWIL"></a>181031 TWIL</h1><hr><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>선형회귀분석 공부</li><li>행렬의 미분 공부</li><li>(PROJECTmini)A star Algorithm 개념 정리</li><li>(PROJECT)프로젝트 진행 data 탐구</li><li>데이터 전처리 공부</li></ol><hr><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>Project 모임</li><li>데이터 전처리, 데이터들의 의미 파악, 예측할 delay 부분 정의하기<br><br></li></ol><hr><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>오늘은 아침부터 하루종일 컴퓨터 앞에 앉아 있어서, 눈과 목이 너무 아프다. 그래도 새로운 알고리즘 내용에<br>관한 이해와, 앞으로 진행할 메인 프로젝트의 data들의 의미를 파악해서 뿌듯한 하루였다. Data의 의미를<br>파악했으나 이것을 처리하기 위해서 numpy 와 pandas 의 documentation 을 읽으면서 데이터들을 다뤘다.<br>라이브러리와 패키지들의 메소드와 클래스들을 자유자재로 다루기 위해선, 계속 사용해보면서 익혀야 함을 느꼈다.<br>메소드들을 알면 복잡하게 코드를 안짜도 이미 내장되어있는 메소드로 손쉽게 처리할 수 있기 때문이다.</li><li>data를 혼자 곰곰히 보다, 시간에 관한 column 의 의미를 파악했으나 이것을 손쉽게 합쳐서 데이터들을<br>재정렬하는데 오늘 실패했다. 의미는 파악했으니, 내일 좀더 시도해보면 시간에 관한 data 를 정리할 수 있지<br>않을까 한다.</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181031-TWIL&quot;&gt;&lt;a href=&quot;#181031-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181031 TWIL&quot;&gt;&lt;/a&gt;181031 TWIL&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>181030-TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/30/181030-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/30/181030-TodayWhatILearned/</id>
    <published>2018-10-30T14:20:31.000Z</published>
    <updated>2018-10-30T14:26:50.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181030-TWIL"><a href="#181030-TWIL" class="headerlink" title="181030 TWIL"></a>181030 TWIL</h1><hr><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>검정, 추정 부분 수식 꼼꼼히 다시 보기</li><li>A star(A*) Algorithm 개념 읽기</li></ol><hr><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>선형회귀분석 정리 (패키지 별로 특징, 메서드 파라미터 위주)</li><li>데이터 전처리 부분 공부</li><li>Test data 처리는 어떻게 하는 건지 공부해보기<br><br></li></ol><hr><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>추정부분 수식을 공부하면서 eigenvalue 부분이 기억이 잘 안나던 것을 시간이 될 때 자료들을 챙겨봐야겠다.</li><li>오늘 공부한 선형 회귀분석을 배우니 조금이나마 프로젝트를 어떻게 진행해야되는 건지 감이 잡힌 것 같다. 미약한<br>시작을 하기위해 오늘 공부한 개념들을 사용해서 여러가지 돌려보고 데이터를 파악해볼 수 있을 것 같다.<br>하지만, 우리가 가지고 있는 데이터셋이 바로 적용 할 수 없는 현실적인 데이터이기 때문에, 여러가지 전처리<br>작업이 필요할 것 같다. 오늘 배운 것을 적용해보기 위해 내일은 데이터 전처리를 공부해보고, 또한 test data의<br>생성 역시 공부해보아야할 부분인 것 같다.</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181030-TWIL&quot;&gt;&lt;a href=&quot;#181030-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181030 TWIL&quot;&gt;&lt;/a&gt;181030 TWIL&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>181029-TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/29/181029-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/29/181029-TodayWhatILearned/</id>
    <published>2018-10-29T14:24:56.000Z</published>
    <updated>2018-10-29T14:31:15.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181029-TWIL"><a href="#181029-TWIL" class="headerlink" title="181029 TWIL"></a>181029 TWIL</h1><hr><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>자료구조 Binary Tree, Stack 으로 Queue구현, Stack 응용</li><li>추정 부분 복습</li><li>스터디 나갈 방향 이야기</li><li>A star algorithm search</li></ol><hr><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>‘추정’에서 수식 부분 다시 보기<br><br></li></ol><hr><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>스터디 첫 모임을 가졌다. 프로그래밍에 관해 알고있는 것들을 활용하고 응용하는 쪽으로 어떻게 하면 될지 많은 의견을 나누었다. 상상의 나래를 펼치니, 타오르는 열정과 함께 만들어보고 싶은 것은 많았으나…. 아직 아는게 많지 않기에.. 다시 현실에 눈을 돌렸다.</li><li>Maze 문제에서 다른 알고리즘을 통해 구현해보려고 의견이 모아졌다. 직접 찾아서 적용해보는 첫 algorithm 이기에, 직접 찾아가면서 공부하고, 이것을 적용하는 경험을 통해 또 다른 배울 것이 있을 것 같아 매우 기대된다.</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181029-TWIL&quot;&gt;&lt;a href=&quot;#181029-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181029 TWIL&quot;&gt;&lt;/a&gt;181029 TWIL&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>181028-TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/28/181028-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/28/181028-TodayWhatILearned/</id>
    <published>2018-10-28T13:09:13.000Z</published>
    <updated>2018-10-29T14:25:13.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181028-TWIL"><a href="#181028-TWIL" class="headerlink" title="181028 TWIL"></a>181028 TWIL</h1><hr><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>검정과 추정 공부</li><li>Blog 테마 수정</li></ol><hr><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>‘추정’에서 수식 부분 다시 보기</li><li>(Study) 데이터 구조 강의 듣기<br><br></li></ol><hr><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li><p>MaximumLikelihood 를 실제로 손으로 써가며 풀어보는 과정에서, 지금까지 배웠던 수학적 테크닉들이 모두 쓰이는 것을 보고 뿌듯하면서도 재미있었다. 뿌듯한 이유는 아마도 한줄 한줄 써가는 내용이 여태 공부한 수학 개념들로 이루어진것 때문일 것이다. 그 중에서도 다음 식을 전개하는 과정에서 눈에 잘 들어오지 않아 전개하지 못할 때도 있었다. 이것은 아마 앞부분 개념이 그 순간에 적용이 되지 않기 때문이라고 생각된다. 행렬의 내용중 몇가지 특성들과 라그랑주 멀티플라이어에 대한 수식을 틈이 생길떄 챙겨서 봐야겠다.</p></li><li><p>오늘은 수학을 공부하느라 프로그래밍은 하지 못했다. 중간에 졸린 걸 해소해보고자 블로그 테마 색깔 수정과 그 수정을 위해 블로그의 코드 구조를 본게 전부 였다. 30분 푹빠져서 하다가 주객전도 되지않으려 다음으로 미뤘다.</p></li><li>위 주제들에 관해 알게된 것도 많은 하루였고, 뿌듯한 하루였다.</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181028-TWIL&quot;&gt;&lt;a href=&quot;#181028-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181028 TWIL&quot;&gt;&lt;/a&gt;181028 TWIL&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>181027-TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/27/181027-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/27/181027-TodayWhatILearned/</id>
    <published>2018-10-27T14:38:04.000Z</published>
    <updated>2018-10-28T13:09:52.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181027-TWIL"><a href="#181027-TWIL" class="headerlink" title="181027 TWIL"></a>181027 TWIL</h1><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>확률 수학 공부</li><li>자기전 (스터디)데이터구조 부분 1강 듣기<h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2></li><li>확률분포를 다시 복습하면서 검정, 추정에서 이어지는 부분 꼼꼼히 공부</li><li>데이터 구조 강의 수강 계획 세우기</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>검정방법론에 대해 좀더 꼼꼼히 보았다. 수학적인 수식들은 수업시간에 다 이해가 되는 편이지만 이 수식들을<br>말로써 표현하고, 글로 풀어쓰는 순간 머리가 빠릿빠릿 안돌아가는 느낌이어서, 한단계한단계 논리적으로 따져가며<br>공부하니 이제야 좀 편해진것 같다. 가설 검정 같은 때에도, 말로 풀어쓰는 것 보다 간단하게 수식으로 표현하고,<br>각각의 p-value 를 확인한뒤 원래 작성했던 H_0, H_a 에 대해 생각해보면 쉽게 되었으나 이것을 말로 표현하고<br>글로 구성하려고 하니 간단한것도 복잡하게 생각했던 것 같다. 결국 내가 알게 된것을 상대방과 논의하고<br>앞으로 만나게 될 클라이언트들을 대상으로 설명해야하는 것이 모두 이런 부분에서 시작되는 것임을 느꼈기에,<br>내 생각과 가정 -&gt; 수식으로 표현 -&gt; 다시 말 혹은 글로 표현 하는 것을 습관처럼 해야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181027-TWIL&quot;&gt;&lt;a href=&quot;#181027-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181027 TWIL&quot;&gt;&lt;/a&gt;181027 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-한-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy</title>
    <link href="https://emjayahn.github.io/2018/10/26/Scrapy/"/>
    <id>https://emjayahn.github.io/2018/10/26/Scrapy/</id>
    <published>2018-10-26T14:04:20.000Z</published>
    <updated>2018-10-26T14:05:46.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><ul><li>Scrapy 라이브러리는 파이썬에서 제공하는 라이브러리로써, 대량의 페이지들의 Crawling을 손쉽게 해주는 라이브러리이다.</li></ul><h2 id="1-Install"><a href="#1-Install" class="headerlink" title="1. Install"></a>1. Install</h2><ul><li>파이썬의 라이브러리 이므로 pip 으로 설치 할 수 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-실습"><a href="#2-실습" class="headerlink" title="2. 실습"></a>2. 실습</h2><ul><li>실습을 위해 <strong>import</strong> 할 것들</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> TextResponse</span><br></pre></td></tr></table></figure><ol><li>requests 를 통해 url 정보를 받아온다.</li><li>TextResponse 를 통해 받아온 html 파일을 encoding 과 text형식으로 return</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req = requests.get(<span class="string">"url_name"</span>)</span><br><span class="line">response = TextResponse(req.url, body=req.text, encoding=<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = response.xpath(<span class="string">'xpath'</span>)</span><br><span class="line"><span class="comment"># xpath 로 지정한 엘리먼트를 가져온다.</span></span><br><span class="line">a_text = reponse.xpath(<span class="string">'xpath/text()'</span>)</span><br><span class="line"><span class="comment"># 엘리먼트의 text data 를 가져온다.</span></span><br><span class="line">a_text.extract()</span><br><span class="line"><span class="comment"># 엘리먼트의 text data들을 말그대로 extract 하여, list 형태로 return 해준다</span></span><br></pre></td></tr></table></figure><h2 id="3-Scrapy-사용하기"><a href="#3-Scrapy-사용하기" class="headerlink" title="3. Scrapy 사용하기"></a>3. Scrapy 사용하기</h2><h3 id="1-scrapy-프로젝트-생성"><a href="#1-scrapy-프로젝트-생성" class="headerlink" title="(1) scrapy 프로젝트 생성"></a>(1) scrapy 프로젝트 생성</h3><ul><li>shell command<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject crawler</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!scrapy startproject crawler</span><br></pre></td></tr></table></figure><pre><code>New Scrapy project &apos;crawler&apos;, using template directory &apos;/Users/emjayahn/.pyenv/versions/3.7.0/envs/dss/lib/python3.7/site-packages/scrapy/templates/project&apos;, created in:    /Users/emjayahn/Dev/DSS/TIL(markdown)/crawlerYou can start your first spider with:    cd crawler    scrapy genspider example example.com</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!tree crawler</span><br></pre></td></tr></table></figure><pre><code>crawler├── crawler│   ├── __init__.py│   ├── __pycache__│   ├── items.py│   ├── middlewares.py│   ├── pipelines.py│   ├── settings.py│   └── spiders│       ├── __init__.py│       └── __pycache__└── scrapy.cfg4 directories, 7 files</code></pre><h3 id="2-Scrapy-기본-구조"><a href="#2-Scrapy-기본-구조" class="headerlink" title="(2) Scrapy 기본 구조"></a>(2) Scrapy 기본 구조</h3><ol><li><p>Spider</p><ul><li>크롤링 절차 정하기</li><li>어떤 웹사이트들을 어떻게 크롤링 할 것인지 선언</li><li>각각의 웹페이지의 어떤 부분을 스크래핑 할 것 인지 명시하는 클래스</li></ul></li><li><p>items.py</p><ul><li>spider 가 크롤링한 data 들을 저장할 때, 사용자 정의 자료구조 클래스</li><li>MVC : 중 Model 부분에 해당</li><li>Feature 라고 생각</li></ul></li><li><p>pipeline.py</p><ul><li>스크래핑한 데이터를 어떻게 처리할지 정의</li><li>데이터에 한글이 포함되어 있을 때는 encoding=’utf-8’ utf-8인코딩이 필요</li></ul></li><li><p>settings.py</p><ul><li>Spider, item, pipeline 의 세부 사항을 설정</li><li>(예) 크롤링 빈도 등</li><li>(예) robots.txt - ROBOTSTXT_OBEY=True</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scrapy&quot;&gt;&lt;a href=&quot;#Scrapy&quot; class=&quot;headerlink&quot; title=&quot;Scrapy&quot;&gt;&lt;/a&gt;Scrapy&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
      <category term="Crawling" scheme="https://emjayahn.github.io/categories/Python/Crawling/"/>
    
    
  </entry>
  
  <entry>
    <title>Xpath</title>
    <link href="https://emjayahn.github.io/2018/10/26/Xpath/"/>
    <id>https://emjayahn.github.io/2018/10/26/Xpath/</id>
    <published>2018-10-26T13:02:50.000Z</published>
    <updated>2018-10-26T14:05:44.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><h2 id="1-xpath란"><a href="#1-xpath란" class="headerlink" title="1. xpath란?"></a>1. xpath란?</h2><ul><li>xpath = XML Path Language</li><li>XML 문서의 element나 attribute의 value에 접근하기 위한 언어</li><li>XML 문서를 해석하기 위한 언어이므로, 기본적으로 path expression 이 바탕이 되어있다.</li><li>연산, 문자열 처리를 위한 라이브러리를 내장하고 있다.</li></ul><h2 id="2-Location-Path"><a href="#2-Location-Path" class="headerlink" title="2. Location Path"></a>2. Location Path</h2><ul><li>element 를 찾으러 가는 것이므로, location을 나타내기 위한 연산자는 다음과 같다.</li></ul><ol><li><code>element_name</code> : element_name 과 일치하는 모든 element를 선택한다.</li><li><code>/</code> :<ul><li>가장 처음 쓰는 <code>/</code>는 절대경로를 의미한다.</li><li>Path 중간에 쓰는 <code>/</code>는 조건에 맞는 바로 다음 하위 엘리먼트를 검색한다. (css selector에서 <code>&gt;</code>와 같다)</li></ul></li><li><code>//</code> : 가장 상위 엘리먼트</li><li><code>.</code> : 현재 엘리먼트</li><li><code>*</code> : 조건에 맞는 전체 하위 엘리먼트를 검색한다(css selector 에서 한칸 띄우는 것 과 같다)</li><li><code>element[조건]</code> : 엘리먼트에 조건에 해당되는 것을 검색한다<ul><li>(예) <code>p[2]</code> : p 엘리먼트 중 두번째 엘리먼트를 선택 <strong>주의:1부터 시작, 0이 아님 </strong></li><li>(예) <code>[@(attribute_key=&quot;attribute_value&quot;)]</code> : 속성값으로 엘리먼트를 선택<br><code>[@id=&quot;main&quot;]</code> : “main” 이라는 id 를 선택<br><code>[@class=&quot;pp&quot;]</code> : “pp” 라는 class 를 선택</li></ul></li><li><code>not(조건)</code> : 조건이 아닌 엘리먼트를 찾는다.</li><li><code>/text()</code> : 해당 엘리먼트의 text 데이터를 가져온다</li><li><code>/@attribute_name</code> : 해당 엘리먼트의 attribute_name 에 할당된 value 값을 가져옴<ul><li><code>/@href</code> : 해당 엘리먼트의 href의 value 값을 가져옴</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xpath&quot;&gt;&lt;a href=&quot;#xpath&quot; class=&quot;headerlink&quot; title=&quot;xpath&quot;&gt;&lt;/a&gt;xpath&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
      <category term="Crawling" scheme="https://emjayahn.github.io/categories/Python/Crawling/"/>
    
    
  </entry>
  
  <entry>
    <title>181026_TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/26/181026-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/26/181026-TodayWhatILearned/</id>
    <published>2018-10-26T03:49:13.000Z</published>
    <updated>2018-10-26T14:46:49.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181026-TWIL"><a href="#181026-TWIL" class="headerlink" title="181026 TWIL"></a>181026 TWIL</h1><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>Xpath, Scrapy 를 활용한 Crawling 공부</li><li>DataScience 와 DataEngineering 의 차이점 찾아보기</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률분포 공부</li><li>Scrapy 활용해보기</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>DataScience 와 DataEngineering 의 공통점과 차이점에 대해 알아보았는데, 아직은 현업에서 각<br>분야가 하고 있는 일이 어떻게 다른지 확실한 감이 오지 않는 것 같다. 내가 명확히 재밌어하는 것은 아직까지는<br>어떤 디테일한 분야가 아니라, 수학적인 것, 프로그래밍 적인 것들을 배운 것을 적용해보고 응용하는 것에<br>흥미를 느끼는 것 같은데 이보다 더 앞서 생각해보고 결정하려고 하니 감이 잘 오지 않는 것 같다.</li><li>지금 현재로서는, 다양한 기계학습 알고리즘과 머신러닝 등을 이용하여 prediction 등을 통해 새로운 Insight<br>를 얻어내는 것에 관심이 있는 것 같다. 이 분야를 공부하고 배워 나가면서 엔지니어링 분야를 필요에 의해 점차<br>공부해 나가는 방향으로 삼고 싶다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181026-TWIL&quot;&gt;&lt;a href=&quot;#181026-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181026 TWIL&quot;&gt;&lt;/a&gt;181026 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-한-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>Pillow</title>
    <link href="https://emjayahn.github.io/2018/10/25/Pillow/"/>
    <id>https://emjayahn.github.io/2018/10/25/Pillow/</id>
    <published>2018-10-25T12:22:20.000Z</published>
    <updated>2018-10-25T13:16:51.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><ul><li>Pillow 는 Python에서 이미지를 핸들링 하기위한 라이브러리이다. 스크린 샷, 이미지 크롭, 썸네일<br>등을 만들 수 있다.</li><li>또한, 다양한 이미지 확장자를 다룰수 있다. (예, jpg, png)</li></ul><h2 id="Pillow-install"><a href="#Pillow-install" class="headerlink" title="Pillow install"></a>Pillow install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h3 id="1-Import-Convention"><a href="#1-Import-Convention" class="headerlink" title="1. Import Convention"></a>1. Import Convention</h3><ul><li>Pillow 를 사용하기에 앞서, Import 해야한다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Pillow-메소드"><a href="#2-Pillow-메소드" class="headerlink" title="2. Pillow 메소드"></a>2. Pillow 메소드</h3><h4 id="1-open"><a href="#1-open" class="headerlink" title="(1) open()"></a>(1) open()</h4><ul><li><p>이름 그대로, 경로와 파일 이름을 적어주면, 해당 이미지리턴하여 Variable 에 할당한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = Image.open(<span class="string">"imagefile_name"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-crop"><a href="#2-crop" class="headerlink" title="(2) crop()"></a>(2) crop()</h4></li><li>이름 그대로, image 를 잘라준다. 이 때 Parameter 는 box형태로 들어가게 된다.</li><li>box 는 (left, upper, right, lower) 로 들어가게 된든데, pixel 단위로 들어가면 된다</li><li><p>이미지의 가장 왼쪽과 위쪽 라인을 기준으로, <br></p><ul><li>left px 만큼</li><li>upper px 만큼</li><li>(왼쪽을 기준으로) right px 만큼</li><li>(위쪽을 기준으로) bottom px 만큼 <br><br>잘라, box 로 만들어 준다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box = (<span class="number">10</span>, <span class="number">10</span>, <span class="number">110</span>, <span class="number">110</span>)</span><br><span class="line">image.crop(box)</span><br><span class="line"><span class="comment">### 이렇게 되면 가로세로 100px 만큼의 이미지가 만들어진다.</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-thumbnail"><a href="#3-thumbnail" class="headerlink" title="(3) thumbnail()"></a>(3) thumbnail()</h4></li><li>썸네일을 만들어준다.</li><li>썸네일의 활용 방안은 한 가지 사진을 어플리케이션 곳곳에서 사용한다고 할 때, 데이터 사이즈가 큰 원본 사진을 계속 해서 들고 다니며 사용하면 어플리케이션에 따라 메모리 낭비, 서버용량 낭비, 트래픽 낭비 등으로 이어질 수 있다. 따라서, 이미지의 데이터 크기와 해상도를 낮춰 사용할 수 있다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image.thumbnail((pixel, pixel))</span><br><span class="line"><span class="comment">#thumbnail 메소드를 사용하여, 원하는 pixel 수로 줄일 수 있다.</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pillow&quot;&gt;&lt;a href=&quot;#Pillow&quot; class=&quot;headerlink&quot; title=&quot;Pillow&quot;&gt;&lt;/a&gt;Pillow&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>181025_TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/25/181025-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/25/181025-TodayWhatILearned/</id>
    <published>2018-10-25T00:01:11.000Z</published>
    <updated>2018-10-26T04:13:17.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181025-TWIL"><a href="#181025-TWIL" class="headerlink" title="181025 TWIL"></a>181025 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>확률분포 공부</li><li>프로젝트 모임</li><li>Selenium, Scrapy, Pillow 활용 공부</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>Selenium, Pillow 활용 공부</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률분포 공부</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>동영상과 이미지를 처리하는 방법에 대해 공부하면서, Selenium 을 활용해 많은 활용도를 느꼈다.<br>주말을 이용해 동영상이나 이미지들을 Crawling 해서 class 형태로 만드는 방법을 시도해봐야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181025-TWIL&quot;&gt;&lt;a href=&quot;#181025-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181025 TWIL&quot;&gt;&lt;/a&gt;181025 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="https://emjayahn.github.io/2018/10/24/Selenium/"/>
    <id>https://emjayahn.github.io/2018/10/24/Selenium/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-26T14:04:54.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p><ul><li>자동화 할 수 있는 프로그램</li></ul></blockquote><h2 id="Install-Selenium"><a href="#Install-Selenium" class="headerlink" title="[ Install Selenium ]"></a>[ Install Selenium ]</h2><ol><li><p>chrome driver 다운로드</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv ~/Download/chromedriver /usr/<span class="built_in">local</span>/bin</span></span><br></pre></td></tr></table></figure></li><li><p>Selenium Python Package 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install selenium</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="1-셀레니움-사용해보기"><a href="#1-셀레니움-사용해보기" class="headerlink" title="1. 셀레니움 사용해보기"></a>1. 셀레니움 사용해보기</h2><ul><li><p>import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure></li><li><p>Open Browser (Chrome Driver)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure></li><li><p>페이지 이동</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure></li><li><p>브라우져 상에서 자바 스크립트 실행</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">"window.scrollTo(300, 400)"</span>)</span><br></pre></td></tr></table></figure></li><li><p>지금 control하고 있는 window 객체 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main_window = driver.current_window_handle</span><br><span class="line">main_window</span><br><span class="line"><span class="comment">#현재 control 하고 있는 window 의 객체를 리턴한다.</span></span><br></pre></td></tr></table></figure></li><li><p>열려 있는 전체 window 탭 모두 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows = driver.window_handles</span><br><span class="line">windows</span><br><span class="line"><span class="comment">#현재 열려있는 모든 탭의 객체를 리스트 형태로 리턴한다.</span></span><br></pre></td></tr></table></figure></li><li><p>열려있는 window 탭 중, control 대상 window 로 바꾸기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to_window(windows[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#다시 원래 열었던 창으로 돌아가기</span></span><br><span class="line">driver.switch_to_window(main_window)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-Alert-와-Confirm-다루기"><a href="#2-Alert-와-Confirm-다루기" class="headerlink" title="2. Alert 와 Confirm 다루기"></a>2. Alert 와 Confirm 다루기</h2><ul><li>웹을 자동화해서 다니다보면, Alert 창이나 Confirm 창이 의도치 않게 나올 수 있다. 이를 다루는 방법은 다음과 같다.</li><li>Alert와 Confirm 창의 차이는, <br><br>Alert 는 확인 창 하나만 있고, Confirm은 확인과 취소가 같이 있는 창이다.</li></ul><h3 id="1-Alert"><a href="#1-Alert" class="headerlink" title="(1) Alert"></a>(1) Alert</h3><ul><li><p>Alert 띄우기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drive.switch_to_window(main_window)</span><br><span class="line">drive.execute_script(<span class="string">"alert('이게 alert 로 뜰겁니다.');"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Alert 확인 누르기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to.alert</span><br><span class="line">alert.accept()</span><br></pre></td></tr></table></figure></li><li><p>Alert 창이 있으면 확인을 누르고, 없으면 없다고 리턴하기 (예외처리)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  alert = driver.switch_to.alert</span><br><span class="line">  alert.accept()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  print(<span class="string">"alert 가 없습니다."</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Confirm"><a href="#2-Confirm" class="headerlink" title="(2) Confirm"></a>(2) Confirm</h3><ul><li><p>Confirm 띄우기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">"confirm('이게 Confirm 창입니다.');"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Confirm 창 확인 누르기 or 취소 누르기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">confirm = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 확인</span></span><br><span class="line"><span class="comment"># confirm.accept()</span></span><br><span class="line"><span class="comment"># 취소</span></span><br><span class="line">confirm.dismiss()</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-입력창에-글씨-입력하기"><a href="#3-입력창에-글씨-입력하기" class="headerlink" title="3. 입력창에 글씨 입력하기"></a>3. 입력창에 글씨 입력하기</h2><ul><li>이제부터 Selenium을 통해 특정 html 의 element 에 액션을 주려면,<br>각종 Selector 를 사용하여 html 상의 element을 셀렉팅 하고, 해당 element 에게 액션을 주어야한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(nameof cssselector).send_keys(<span class="string">"입력할 내용"</span>)</span><br></pre></td></tr></table></figure><ul><li>.find_element_by_css_selector 와 <br><br>.find_<b>elements</b>_<br>by_css_selector 는 다르다.element 는 하나의 selector 만 선택하는 반면, elements 는 여러가지 element 를 셀렉팅 해서, 리스트 형식으로 Return 한다.</li><li>따라서 이렇게 리스트 형식으로 Return 이 된 경우, List[0] 등과 같이 그 엘리먼트를 뒤에 지정해줘야된다. 즉,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(nameof cssselector)</span><br><span class="line"><span class="comment">#위는 바로 selecting 이 된것이지만,</span></span><br><span class="line">driver.find_elements_by_css_selector(nameof cssselector)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#위는 뒤에 selecting 위해 list 의 요소를 선택 해주어야한다.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-버튼-클릭하기"><a href="#4-버튼-클릭하기" class="headerlink" title="4. 버튼 클릭하기"></a>4. 버튼 클릭하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위의 방법처럼, element 를 선택해준다.</span></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">"name of css selector"</span>).click()</span><br></pre></td></tr></table></figure><h2 id="5-id-class-그-외의-attribute-값을-selecting-하는-법"><a href="#5-id-class-그-외의-attribute-값을-selecting-하는-법" class="headerlink" title="5. id, class, 그 외의 attribute 값을 selecting 하는 법"></a>5. id, class, 그 외의 attribute 값을 selecting 하는 법</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(<span class="string">"name of css selector."</span>).click()</span><br><span class="line"><span class="comment"># id 의 경우 : #idname</span></span><br><span class="line"><span class="comment"># class 의 경우 : .classname</span></span><br><span class="line"><span class="comment"># 다른 attribute 의 경우 : [attribute = 'value']</span></span><br></pre></td></tr></table></figure><h2 id="6-selecting-한-element-의-attribute-value-를-얻는-방법"><a href="#6-selecting-한-element-의-attribute-value-를-얻는-방법" class="headerlink" title="6. selecting 한 element 의 attribute value 를 얻는 방법"></a>6. selecting 한 element 의 attribute value 를 얻는 방법</h2><ul><li>CSS로 선택한 element에 html 태그에는 다양한 attribute 들이 있을 수 있다. 이 중<br>attribute의 value에 접근 하고 싶을 때는 .get_attribute()메소드를 사용할 수 있다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(<span class="string">"name of css selector"</span>).get_attribute(<span class="string">"attribute_name"</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-element-의-위치와-사이즈-구하기"><a href="#7-element-의-위치와-사이즈-구하기" class="headerlink" title="7. element 의 위치와, 사이즈 구하기"></a>7. element 의 위치와, 사이즈 구하기</h2><ul><li>스크롤을 내리거나, 엘리먼트의 위치와 크기를 알고 싶을 때 사용할 수 있다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element_by_css_selector(<span class="string">"name of css selector"</span>)</span><br><span class="line">element.location</span><br><span class="line"><span class="comment">#element 의 좌측 상단의 위치가 pixel 단위로 x, y 값의 dictionary로 보여준다.</span></span><br><span class="line">element.size</span><br><span class="line"><span class="comment">#element 의 size 를 height, width를 pixel 단위로 dictionary로 보여준다.</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Selenium&quot;&gt;&lt;a href=&quot;#Selenium&quot; class=&quot;headerlink&quot; title=&quot;Selenium&quot;&gt;&lt;/a&gt;Selenium&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
      <category term="Crawling" scheme="https://emjayahn.github.io/categories/Python/Crawling/"/>
    
    
  </entry>
  
  <entry>
    <title>Requests</title>
    <link href="https://emjayahn.github.io/2018/10/24/Requests/"/>
    <id>https://emjayahn.github.io/2018/10/24/Requests/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-26T10:30:57.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-CRAWLING-1"><a href="#WEB-CRAWLING-1" class="headerlink" title="WEB CRAWLING 1"></a>WEB CRAWLING 1</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests "></a>Requests <br></h2><ul><li>Requests 패키지는 크롤링 하고자 하는 페이지를 url 값을 통해 가져와 객체로 변환 해주는 기능을 가지고 있다. <br></li></ul><h3 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h3><ul><li>Requests 를 이용하기 위해 package 를 설치해준다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install requests</span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li>request를 이용하면서, json 형식으로의 크롤링과, html 형식으로 css  selecting 을 위한 크롤링을 실습해 볼 것이므로, BeautifulSoup Package 역시 같이 설치해준다. (BeautifulSoup은 html parser 를 이용해보기 위함이다.)</li><li><p>python-forecastio 는 dark sky 의 api를 활용해 날씨 데이터를 받아올때 사용해보기 위해 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install bs4</span><br><span class="line">$ pip3 install python-forecastio</span><br></pre></td></tr></table></figure></li><li><p>import 할 것들</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> forecastio</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pandas.io.json <span class="keyword">import</span> json_normalize</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-jSON-Dark-Sky-api-활용-날씨정보-가져오기"><a href="#2-jSON-Dark-Sky-api-활용-날씨정보-가져오기" class="headerlink" title="2. [ jSON ] Dark Sky api 활용 날씨정보 가져오기"></a>2. [ jSON ] Dark Sky api 활용 날씨정보 가져오기</h3><ul><li>DarkSky api 는 위도와 경도를 입력하면, 날씨 정보를 주는 api 이다.</li><li><p><a href="https://darsky.net/dev/" target="_blank" rel="noopener">https://darsky.net/dev/</a> 에 가입 후, TOKEN 을 받는다.</p></li><li><p>위에서 받은 개인의 TOKEN 을 활용해 url 을 먼저, formating을 해준다.</p></li><li>requests의 get 메소드를 활용해 url 의 정보를 받아온다.</li><li>받아온 정보를 requests 의 json 메소드로 json 형식으로 변환해준다.</li><li>json 을 확인하고 원하는 정보를 return 해준다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forecast</span><span class="params">(lat, lng)</span>:</span></span><br><span class="line">  url = <span class="string">"https://api.darksky.net/forecast/&#123;&#125;/&#123;&#125;,&#123;&#125;"</span>.format(TOKEN, lat, lng)</span><br><span class="line">      response = requests.get(url)</span><br><span class="line">      json_obj = response.json()</span><br><span class="line">      <span class="keyword">return</span> json_obj[<span class="string">"hourly"</span>][<span class="string">"summary"</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-html-BS4-활용-html-selecting-해서-가져오기"><a href="#3-html-BS4-활용-html-selecting-해서-가져오기" class="headerlink" title="3. [ html ] BS4 활용 html selecting 해서 가져오기"></a>3. [ html ] BS4 활용 html selecting 해서 가져오기</h3><ul><li>네이버의 실시간 검색순위 부분의 text 를 크롤링 해보자</li><li>html 파일을 BS4 를 활용해 받아온뒤, CSS selecting 으로 원하는 text data 를 가져온다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naver</span><span class="params">()</span>:</span></span><br><span class="line">  url = <span class="string">"https://www.naver.com"</span></span><br><span class="line">  df = pd.DataFrame(columns=[<span class="string">"rank"</span>, <span class="string">"keyword"</span>])</span><br><span class="line">  response = requests.get(url)</span><br><span class="line">  dom = BeautifulSoup(response.content, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># BeautifulSoup(markup, features, builder, parse_only, from_encoding, exclude_encodings)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> keyword <span class="keyword">in</span> keywords:</span><br><span class="line">        df.loc[len(df)] = &#123;</span><br><span class="line">            <span class="string">"rank"</span>:keyword.select_one(<span class="string">'.ah_r'</span>).text,</span><br><span class="line">            <span class="string">"keyword"</span>:keyword.select_one(<span class="string">'.ah_k'</span>).text</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><ul><li>print(response.content)의 모양을 보자.</li><li>따라서, BeautifulSoup 으로 html 형식으로 parsing 해주고, css 를 활용해 selecting 해준다.</li><li>.select 는 여러개의 엘리먼트를 선택 -&gt; 결과가 리스트</li><li>.select_one은 하나의 엘리먼트를 선택 -&gt; 결과가 하나의 객체</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB-CRAWLING-1&quot;&gt;&lt;a href=&quot;#WEB-CRAWLING-1&quot; class=&quot;headerlink&quot; title=&quot;WEB CRAWLING 1&quot;&gt;&lt;/a&gt;WEB CRAWLING 1&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
      <category term="Crawling" scheme="https://emjayahn.github.io/categories/Python/Crawling/"/>
    
    
      <category term="Crawling, Web, Requests" scheme="https://emjayahn.github.io/tags/Crawling-Web-Requests/"/>
    
  </entry>
  
  <entry>
    <title>Thread</title>
    <link href="https://emjayahn.github.io/2018/10/24/thread/"/>
    <id>https://emjayahn.github.io/2018/10/24/thread/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-26T10:30:17.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p><ul><li>파이썬 기본 : Single Thread (Main Thread)</li><li>threading 모듈 : main thread에서 subthread 를 생성하여 진행하는 방식</li><li>multiprocessing 모듈 : double cpu</li></ul></blockquote><ul><li>ThreadPoolExecutor : API - 멀티스레드와 멀티프로세스 동일한 형태로 디자인(Pool 클래스만 변경하면됨)</li></ul><h3 id="threading-Thread-arguement"><a href="#threading-Thread-arguement" class="headerlink" title="threading.Thread() arguement"></a>threading.Thread() arguement</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread(group=, target=, args= , kwargs=, *, daemon=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment">#target= : 실제 스레드에서 돌아가게 될 함수</span></span><br><span class="line"><span class="comment">#args= : tuple 로 target 함수에 들어가게될 argument</span></span><br><span class="line"><span class="comment">#kwargs= : dictionary로 target 함수에 들어가게될 argument</span></span><br><span class="line"><span class="comment">#daemon : 데몬 스레드로 돌아갈지 여부</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Thread 의 메소드</span></span><br><span class="line">start(): <span class="comment">#스레드의 실행, self 의 run() 메소드를 호출</span></span><br><span class="line">run(): <span class="comment">#스레드가 실제로 수행하게될 작업</span></span><br><span class="line">name : <span class="comment">#스레드의 이름</span></span><br><span class="line">threading.locals() : <span class="comment">#해당 스레드 내부에서 사용할 로컬 변수 지정</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
      <category term="Thread" scheme="https://emjayahn.github.io/categories/Python/Thread/"/>
    
    
      <category term="Thread" scheme="https://emjayahn.github.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>181024 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/24/181024-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/24/181024-TodayWhatILearned/</id>
    <published>2018-10-24T01:41:11.714Z</published>
    <updated>2018-10-26T04:13:11.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181024-TWIL"><a href="#181024-TWIL" class="headerlink" title="181024 TWIL"></a>181024 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>멀티스레딩으로 네이버 크롤링 코드 작성</li><li>오후 4시 스터디</li><li>확률 분포 공부</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>멀티스레딩 개념을 활용한 크롤링 코드 작성</li><li>오후 4시 스터디</li><li>확률분포 공부</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률분포 공부</li><li>프로젝트 모임</li><li>Pandas 정리해보기</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>Documentation 과 각종 개념 자료들을 혼자 보고 공부하면서, 파이썬이라는 언어가 단순히 책 한권 끝냈다고 해서 끝나는 언어가 아님을 깨달았다. 기본적인 문법을 금방 익숙해져서, ‘역시 쉬운 언어인가’라고 생각했다가 오늘 다양한 자료를 찾아보고 읽어보면서 언어 하나만해도 아직 공부할게 무궁무진 하다는 것을 깨달았다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181024-TWIL&quot;&gt;&lt;a href=&quot;#181024-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181024 TWIL&quot;&gt;&lt;/a&gt;181024 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181023 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/23/181023-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/23/181023-TodayWhatILearned/</id>
    <published>2018-10-23T04:31:39.118Z</published>
    <updated>2018-10-26T04:13:04.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181023-TWIL"><a href="#181023-TWIL" class="headerlink" title="181023 TWIL"></a>181023 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>Queue 정리 하기</li><li>확률 분포 공부</li><li>&lt;스터디&gt;멀티 스레딩 개념을 포함한 네이버 크롤링 코드짜기</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>&lt;스터디&gt; 멀티 스레딩에 관해 이야기, 공부해볼 정보들 공유, 어떻게 코드를 구성할 것인지 의견을 나누었다.</li><li>Queue 개념 정리 및 코드 구현 연습</li><li>베르누이 분포, 이항분포 정리 및 Searching</li><li>블로그 수정</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>오후 4시 멀티 스레드 관련한 내용으로 온라인 스터디 모임 예정</li><li>멀티스레딩 개념을 활용한 네이버 크롤링 코드 짜기</li><li>각종 확률 분포 및 검정 부분까지 복습</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>오늘 공부한 testing 시작부분부터는 그간 배웠던 것을 한꺼번에 적용한다. 배웠던 여러가지 분포를 활용하여,<br>가설을 세우고 이 가설이 선택한 분포의 관점에서 봤을 떄, 가설을 선택할지 기각할지에 관한 내용은 점차<br>data를 통해 prediction 을 해가는 과정에 있는 듯한 느낌을 받았다.</li><li>아직 검정 과정과 앞으로 공부하게 될 여러가지 분석 모델을 이해하기에 앞서배운 확률분포 부분의 내용이<br>부족한듯하여, 계속 꾸준히 앞부분을 공부해야될 것 같다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181023-TWIL&quot;&gt;&lt;a href=&quot;#181023-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181023 TWIL&quot;&gt;&lt;/a&gt;181023 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Queue</title>
    <link href="https://emjayahn.github.io/2018/10/22/queue/"/>
    <id>https://emjayahn.github.io/2018/10/22/queue/</id>
    <published>2018-10-22T13:49:03.552Z</published>
    <updated>2018-10-25T12:35:12.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><h2 id="Queue의-특징"><a href="#Queue의-특징" class="headerlink" title="Queue의 특징"></a>Queue의 특징</h2><ol><li>내가 버스정류장에 서있다고 생각해보면, 버스 전용차선으로 버스가 줄지어 들어온다. 아무리 뒷차가 손님을 다 태웠다고해서, 앞에 버스가 아직 손님을 태우고 있으면 뒷 버스는 출발 하지 못한다. <br><br><strong>이것이 바로 QUEUE</strong></li><li>FIFO : First In First Out == 선입선출 or 후입후출</li><li>front와 rear 라는 index가 각각 구조의 맨 앞과 뒤를 가리키고 있다. Data는 rear로 들어가고, front 에서 나온다.</li></ol><h2 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h2><ol><li><p>empty() 라는 메소드로 Queue 에 data가 있는지 없는지 확인하게 한다. empty 이면 True, not empty 이면, False 를 return 한다.<br><br><strong>Queue.empty() returns Boolean</strong></p></li><li><p>enaueue(data) 메소드로 Queue의 rear 가 가리키고 있는 data 뒤에 data를 넣는다.<br><br><strong>Queue.enqueue (data) returns None</strong></p></li><li><p>dequeue() 메소드로 Queue의 front가 가리키고 있는 data를 반환하면서 삭제 된다.<br><br><strong>Queue.dequeue() returns data</strong></p></li><li><p>peek() 메소드로 Queue의 front가 가리키고 있는 data를 반환한다. peek은 어디까지나 확인하는 메소드 이므로, data가 삭제되지 않는다.<br><br><strong>Queue.peek() returns data</strong></p></li></ol><h2 id="구현-1-by-python-list"><a href="#구현-1-by-python-list" class="headerlink" title="구현 1 : by python list"></a>구현 1 : by python list</h2><ul><li>Queue 구조를 Python에 내장 되어 있는 list를 container 로 구현한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.container=list()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># ADT 를 따라서, 비어 있으면 return True 비어있지 않으면 return False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.container:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="comment"># list 를 활용했으므로, list.append(data)를 활용할 수 있다.</span></span><br><span class="line">    self.container.append(data)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># pop 역시 list.pop()을 활용할 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> self.container.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># peek은 단지 front 에 어떤 데이터가 있는지 확인 하는 것 뿐이므로, 현재 리스트의 가장 앞 부분에 있는 data 를 확인하면 된다.</span></span><br><span class="line">    <span class="keyword">return</span> self.container[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="구현-2"><a href="#구현-2" class="headerlink" title="구현 2 :"></a>구현 2 :</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Queue&quot;&gt;&lt;a href=&quot;#Queue&quot; class=&quot;headerlink&quot; title=&quot;Queue&quot;&gt;&lt;/a&gt;Queue&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="DataStructure" scheme="https://emjayahn.github.io/categories/DataStructure/"/>
    
    
      <category term="datastructure" scheme="https://emjayahn.github.io/tags/datastructure/"/>
    
  </entry>
  
  <entry>
    <title>Stack</title>
    <link href="https://emjayahn.github.io/2018/10/22/stack/"/>
    <id>https://emjayahn.github.io/2018/10/22/stack/</id>
    <published>2018-10-22T13:18:03.548Z</published>
    <updated>2018-10-25T12:35:19.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><blockquote><p>공부한 내용을 스스로 보기 쉽게 정리한 글입니다.</p></blockquote><h2 id="Stack-의-특징"><a href="#Stack-의-특징" class="headerlink" title="Stack 의 특징"></a>Stack 의 특징</h2><ol><li>접시를 쌓듯이 데이터를 쌓아 올리는 모양의 데이터 구조</li><li>LIFO : Last In First Out  == 후입선출 or 선입후출</li><li>top index 가 항상 Stack의 가장 윗부분을 가리키고 있어, 우리는 top 위치만 볼 수 있다.</li><li>단점 : stack 의 top 이 외에 밑에 쌓여져있는 데이터의 Search 가 안된다.</li></ol><h2 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h2><ol><li><p>empty() 라는 메소드로 Stack 에 data가 있는지 없는지 확인하게 한다. empty 이면 True, not empty 이면, False 를 return 한다.<br></p><p><strong>Stack.empty() returns Boolean</strong></p></li><li><p>Stack의 top 위치에 데이터를 쌓는다.<br></p><p><strong>Stack.push(data) returns None</strong></p></li><li><p>Stack의 top 위치에 있는 데이터를 삭제하면서 반환한다.<br></p><p><strong>Stack.pop() returns data</strong></p></li><li>Stack의 top 위치에 있는 데이터를 반환하지만, 삭제하지 않는다. 어떤 데이터가 있는지 just 확인.<br><br><strong>Stack.peek() returns data</strong></li></ol><h2 id="구현-1-by-python-list"><a href="#구현-1-by-python-list" class="headerlink" title="구현 1 : by python list"></a>구현 1 : by python list</h2><ul><li>Stack 구조를 Python에 내장 되어 있는 list를 container 로 삼아 구현하게 되면, 그 구현은 매우매우 쉽다.</li><li>Python의 List 자료형의 대단함을 그만큼 느낀다.</li><li>이 때 List 의 index가 큰 쪽이 top 방향이다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.container=list()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># ADT 를 따라서, 비어 있으면 return True 비어있지 않으면 return False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.container:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="comment"># list 를 활용했으므로, list.append(data)를 활용할 수 있다.</span></span><br><span class="line">    self.container.append(data)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># pop 역시 list.pop()을 활용할 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> self.container.pop()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># peek은 단지 top 에 어떤 데이터가 있는지 확인 하는 것 뿐이므로, 현재 리스트의 가장 마지막에 append 되어 있는 data를 확인하면 된다.</span></span><br><span class="line">    <span class="keyword">return</span> self.container[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="구현-2"><a href="#구현-2" class="headerlink" title="구현 2 :"></a>구현 2 :</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;공부한 내용을 스스로 보기 쉽게 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="DataStructure" scheme="https://emjayahn.github.io/categories/DataStructure/"/>
    
    
      <category term="datastructure" scheme="https://emjayahn.github.io/tags/datastructure/"/>
    
  </entry>
  
  <entry>
    <title>181022 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/22/181022-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/22/181022-TodayWhatILearned/</id>
    <published>2018-10-22T01:17:15.000Z</published>
    <updated>2018-10-26T04:12:53.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181022-TWIL"><a href="#181022-TWIL" class="headerlink" title="181022 TWIL"></a>181022 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>블로그 테마 바꾸기</li><li>Selenium 과제 두번째 것 (17:47 - 19:00)</li><li>확률 분포 다시 한번 정리하기</li><li>데이터구조 (PseudoLinkedList, Stack, Queue)정리</li><li>새 맥북 환경 설정 조금씩 마저 더하기</li><li>DailyScrum Upload</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>Selenium NBA Page Crawling 해서, DataFrame으로 정리 (17:47 - 18:55)</li><li>Stack 정리</li><li>Github 설정</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률 분포 공부</li><li>Queue 정리</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>맥북을 바꾸면서, 환경 설정하는데 너무 많은 시간이 든다. 틈틈히 하고 있는데도 아직 이전 맥북의 환경에서 100% 똑같은 환경을 만들지 못하고 있다. 장비를 바꿀 때, 혹은 다른 작업 환경에서 연속성을 이어 나가기 위해 나에게 맞는 환경설정도 정리할 필요성을 느낀다.</li><li>오늘 공부한 PseudoLinkedList, Stack, Queue 의 활용성에 대해 깊이 고민 해 볼 수 있어서 뿌듯하다. 특히나 PseudoLinkedList의 경우 내가 사용하지 않았던 자료구조나 class를 목적에 맞게 customize 할 수 있는 측면에서 활용성이 높다고 생각된다. 다른 사람이 작성한 class 를 잘 읽어보고, 그 활용도를 높이기 위해 overriding 하는 방법을 틈틈히 챙겨 봐야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181022-TWIL&quot;&gt;&lt;a href=&quot;#181022-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181022 TWIL&quot;&gt;&lt;/a&gt;181022 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181019 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/19/181019_TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/19/181019_TodayWhatILearned/</id>
    <published>2018-10-19T12:00:07.000Z</published>
    <updated>2018-10-26T04:12:47.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181019"><a href="#181019" class="headerlink" title="181019"></a>181019</h1><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ol><li>Web Crawling (Requests, BS4) 공부</li><li>Github 사용할 준비</li><li>GitPages 사용 방법</li><li>공부 했던 내용, 공부할 내용 어떻게 정리 할지 고민</li><li>프로젝트 팀 회의</li></ol><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ol><li>Pandas 내용 정리, 반복 숙달</li><li>수업 내용 복습</li><li>주말 공부할 내용 계획</li><li>코딩 습관을 기르기 위해 일일코딩과 TWIL에 대해 고민</li></ol><h2 id="뭘-느꼈는가"><a href="#뭘-느꼈는가" class="headerlink" title="뭘 느꼈는가"></a>뭘 느꼈는가</h2><ul><li>크롤링 코드를 보면서 공부하고, 또 다시 스스로 짜는 것을 연습하면서 내용의 개념과 코드 자체는 어려운 것이 없으나 BeautifulSoup 이나 Requests 패키지에 담겨있는 각 메서드 들의 종류, 기능, 메서드마다 들어가는 attribute를 참고 할 줄 알아야 된다고 느꼈다.</li><li>매우 기본적인 메서드들일 수 있기에 외워야 할 수도 있겠지만 (또한 반복한다면 숙달되겠지만) 잊어버렸을 때 각 라이브러리들의 Document들을 잘 볼 줄 아는 것이 중요하다고 느꼈다.</li><li>프로젝트 OT 를 한 만큼 본격적인 프로젝트를 진행하기에 앞서 꼼꼼히 준비해 나가야겠다.</li></ul><h1 id="181019-1"><a href="#181019-1" class="headerlink" title="181019"></a>181019</h1><h2 id="오늘-한-일-1"><a href="#오늘-한-일-1" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ol><li>Web Crawling 공부 : Selenium을 활용한 크롤링</li><li>Pandas 활용하여 여러가지 data import 하고, 정렬 바꾸는 연습</li><li>Terminal 환경설정<ul><li>zsh, oh-my-zsh 설치했다.</li><li>git을 적극적으로 활용할 계획이므로, git사용에 유리한 zsh 설정을 마쳤다.</li></ul></li><li>팀 프로젝트에 활용할 데이터 셋 탐색</li><li>github 블로그 Deploy 에 성공했다.<ul><li>Daily 스크럼을 작성하는 것이 하루의 계획과 정리를 하는데 유용하기에, 꾸준히 작성하면서, github 블로그에도 올려볼 계획이다.</li></ul></li></ol><h2 id="내일-할-일-1"><a href="#내일-할-일-1" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ol><li>Pandas 내용 정리, 반복 숙달</li><li>Naver Article Crawling, NBA Data Crawling</li><li>확률과 통계 정리 (연속확률분포 부분)</li></ol><h2 id="뭘-느꼈는가-1"><a href="#뭘-느꼈는가-1" class="headerlink" title="뭘 느꼈는가"></a>뭘 느꼈는가</h2><ul><li>점차 학습하는 내용과 알아야 될 내용이 많아지면서, 내가 배운 것들, 알고 있는 것들. 정확히는 어떤 것에 관해 존재는 알고 있으나 내 머릿속에서 당장 꺼내서 쓰기에는 어려운 것들이 많아지고 있다.</li><li>또한, 내 머릿속에서 꺼내기 쓰기 힘들어 구글을 통해 찾고자하면 내가 기억했던, 알고 있는 정보들과 조금은 내용이 다르고, 이것을 Searching 하는데 쓰는 시간이 아깝다는 생각이 들었다.</li><li>앞으로는 매일 학습하는 내용을 바탕으로, 직접 찾기 쉬운 형태로 정리할 필요성을 느꼈다. 개인. WIKI화.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181019&quot;&gt;&lt;a href=&quot;#181019&quot; class=&quot;headerlink&quot; title=&quot;181019&quot;&gt;&lt;/a&gt;181019&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181018_DailyScrum</title>
    <link href="https://emjayahn.github.io/2018/10/18/181018-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/18/181018-TodayWhatILearned/</id>
    <published>2018-10-18T12:12:13.000Z</published>
    <updated>2018-10-26T04:12:34.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181018"><a href="#181018" class="headerlink" title="181018"></a>181018</h1><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ol><li>Web Crawling (Requests, BS4) 공부</li><li>Github 사용할 준비</li><li>GitPages 사용 방법</li><li>공부 했던 내용, 공부할 내용 어떻게 정리 할지 고민</li><li>프로젝트 팀 회의</li></ol><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ol><li>Pandas 내용 정리, 반복 숙달</li><li>수업 내용 복습</li><li>주말 공부할 내용 계획</li><li>코딩 습관을 기르기 위해 일일코딩과 TWIL에 대해 고민</li></ol><h2 id="뭘-느꼈는가"><a href="#뭘-느꼈는가" class="headerlink" title="뭘 느꼈는가"></a>뭘 느꼈는가</h2><ul><li>크롤링 코드를 보면서 공부하고, 또 다시 스스로 짜는 것을 연습하면서 내용의 개념과 코드 자체는 어려운 것이 없으나 BeautifulSoup 이나 Requests 패키지에 담겨있는 각 메서드 들의 종류, 기능, 메서드마다 들어가는 attribute를 참고 할 줄 알아야 된다고 느꼈다.</li><li>매우 기본적인 메서드들일 수 있기에 외워야 할 수도 있겠지만 (또한 반복한다면 숙달되겠지만) 잊어버렸을 때 각 라이브러리들의 Document들을 잘 볼 줄 아는 것이 중요하다고 느꼈다.</li><li>프로젝트 OT 를 한 만큼 본격적인 프로젝트를 진행하기에 앞서 꼼꼼히 준비해 나가야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181018&quot;&gt;&lt;a href=&quot;#181018&quot; class=&quot;headerlink&quot; title=&quot;181018&quot;&gt;&lt;/a&gt;181018&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Diary" scheme="https://emjayahn.github.io/categories/Diary/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
</feed>
