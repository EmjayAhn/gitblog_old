<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Emjay&#39;s DailyCommit Blog</title>
  
  <subtitle>Emjay&#39;s DataScience &amp; Development</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://emjayahn.github.io/"/>
  <updated>2018-10-24T14:53:58.922Z</updated>
  <id>https://emjayahn.github.io/</id>
  
  <author>
    <name>EmjayAhn(Minjae Ahn)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Requests</title>
    <link href="https://emjayahn.github.io/2018/10/24/Requests/"/>
    <id>https://emjayahn.github.io/2018/10/24/Requests/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-24T14:53:58.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-CRAWLING-1"><a href="#WEB-CRAWLING-1" class="headerlink" title="WEB CRAWLING 1"></a>WEB CRAWLING 1</h1><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests "></a>Requests <br></h2><ul><li>Requests 패키지는 크롤링 하고자 하는 페이지를 url 값을 통해 가져와 객체로 변환 해주는 기능을 가지고 있다. <br></li></ul><h3 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h3><ul><li>Requests 를 이용하기 위해 package 를 설치해준다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install requests</span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li>request를 이용하면서, json 형식으로의 크롤링과, html 형식으로 css  selecting 을 위한 크롤링을 실습해 볼 것이므로, BeautifulSoup Package 역시 같이 설치해준다. (BeautifulSoup은 html parser 를 이용해보기 위함이다.)</li><li><p>python-forecastio 는 dark sky 의 api를 활용해 날씨 데이터를 받아올때 사용해보기 위해 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install bs4</span><br><span class="line">$ pip3 install python-forecastio</span><br></pre></td></tr></table></figure></li><li><p>import 할 것들</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> forecastio</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pandas.io.json <span class="keyword">import</span> json_normalize</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-jSON-Dark-Sky-api-활용-날씨정보-가져오기"><a href="#2-jSON-Dark-Sky-api-활용-날씨정보-가져오기" class="headerlink" title="2. [ jSON ] Dark Sky api 활용 날씨정보 가져오기"></a>2. [ jSON ] Dark Sky api 활용 날씨정보 가져오기</h3><ul><li>DarkSky api 는 위도와 경도를 입력하면, 날씨 정보를 주는 api 이다.</li><li><p><a href="https://darsky.net/dev/" target="_blank" rel="noopener">https://darsky.net/dev/</a> 에 가입 후, TOKEN 을 받는다.</p></li><li><p>위에서 받은 개인의 TOKEN 을 활용해 url 을 먼저, formating을 해준다.</p></li><li>requests의 get 메소드를 활용해 url 의 정보를 받아온다.</li><li>받아온 정보를 requests 의 json 메소드로 json 형식으로 변환해준다.</li><li>json 을 확인하고 원하는 정보를 return 해준다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forecast</span><span class="params">(lat, lng)</span>:</span></span><br><span class="line">  url = <span class="string">"https://api.darksky.net/forecast/&#123;&#125;/&#123;&#125;,&#123;&#125;"</span>.format(TOKEN, lat, lng)</span><br><span class="line">      response = requests.get(url)</span><br><span class="line">      json_obj = response.json()</span><br><span class="line">      <span class="keyword">return</span> json_obj[<span class="string">"hourly"</span>][<span class="string">"summary"</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-html-BS4-활용-html-selecting-해서-가져오기"><a href="#3-html-BS4-활용-html-selecting-해서-가져오기" class="headerlink" title="3. [ html ] BS4 활용 html selecting 해서 가져오기"></a>3. [ html ] BS4 활용 html selecting 해서 가져오기</h3><ul><li>네이버의 실시간 검색순위 부분의 text 를 크롤링 해보자</li><li>html 파일을 BS4 를 활용해 받아온뒤, CSS selecting 으로 원하는 text data 를 가져온다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naver</span><span class="params">()</span>:</span></span><br><span class="line">  url = <span class="string">"https://www.naver.com"</span></span><br><span class="line">  df = pd.DataFrame(columns=[<span class="string">"rank"</span>, <span class="string">"keyword"</span>])</span><br><span class="line">  response = requests.get(url)</span><br><span class="line">  dom = BeautifulSoup(response.content, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># BeautifulSoup(markup, features, builder, parse_only, from_encoding, exclude_encodings)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> keyword <span class="keyword">in</span> keywords:</span><br><span class="line">        df.loc[len(df)] = &#123;</span><br><span class="line">            <span class="string">"rank"</span>:keyword.select_one(<span class="string">'.ah_r'</span>).text,</span><br><span class="line">            <span class="string">"keyword"</span>:keyword.select_one(<span class="string">'.ah_k'</span>).text</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><ul><li>print(response.content)의 모양을 보자.</li><li>따라서, BeautifulSoup 으로 html 형식으로 parsing 해주고, css 를 활용해 selecting 해준다.</li><li>.select 는 여러개의 엘리먼트를 선택 -&gt; 결과가 리스트</li><li>.select_one은 하나의 엘리먼트를 선택 -&gt; 결과가 하나의 객체</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB-CRAWLING-1&quot;&gt;&lt;a href=&quot;#WEB-CRAWLING-1&quot; class=&quot;headerlink&quot; title=&quot;WEB CRAWLING 1&quot;&gt;&lt;/a&gt;WEB CRAWLING 1&lt;/h1&gt;&lt;h2 id=&quot;Requests&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
    
      <category term="Crawling, Web, Requests" scheme="https://emjayahn.github.io/tags/Crawling-Web-Requests/"/>
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="https://emjayahn.github.io/2018/10/24/Selenium/"/>
    <id>https://emjayahn.github.io/2018/10/24/Selenium/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-24T14:54:10.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><ul><li>자동화 할 수 있는 프로그램</li></ul><h2 id="Install-Selenium"><a href="#Install-Selenium" class="headerlink" title="[ Install Selenium ]"></a>[ Install Selenium ]</h2><ol><li><p>chrome driver 다운로드</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mv ~/Download/chromedriver /usr/local/bin</span><br></pre></td></tr></table></figure></li><li><p>Selenium Python Package 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pip3 install selenium</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-셀레니움-사용해보기"><a href="#1-셀레니움-사용해보기" class="headerlink" title="1. 셀레니움 사용해보기"></a>1. 셀레니움 사용해보기</h2><ul><li><p>import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure></li><li><p>Open Browser (Chrome Driver)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure></li><li><p>페이지 이동</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure></li><li><p>브라우져 상에서 자바 스크립트 실행</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">"window.scrollTo(300, 400)"</span>)</span><br></pre></td></tr></table></figure></li><li><p>지금 control하고 있는 window 객체 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main_window = driver.current_window_handle</span><br><span class="line">main_window</span><br><span class="line"><span class="comment">#현재 control 하고 있는 window 의 객체를 리턴한다.</span></span><br></pre></td></tr></table></figure></li><li><p>열려 있는 전체 window 탭 모두 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows = driver.window_handles</span><br><span class="line">windows</span><br><span class="line"><span class="comment">#현재 열려있는 모든 탭의 객체를 리스트 형태로 리턴한다.</span></span><br></pre></td></tr></table></figure></li><li><p>열려있는 window 탭 중, control 대상 window 로 바꾸기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to_window(windows[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#다시 원래 열었던 창으로 돌아가기</span></span><br><span class="line">driver.switch_to_window(main_window)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-Alert-와-Confirm-다루기"><a href="#2-Alert-와-Confirm-다루기" class="headerlink" title="2. Alert 와 Confirm 다루기"></a>2. Alert 와 Confirm 다루기</h2><ul><li>웹을 자동화해서 다니다보면, Alert 창이나 Confirm 창이 의도치 않게 나올 수 있다. 이를 다루는 방법은 다음과 같다.</li><li>Alert와 Confirm 창의 차이는, <br><br>Alert 는 확인 창 하나만 있고, Confirm은 확인과 취소가 같이 있는 창이다.</li></ul><h3 id="1-Alert"><a href="#1-Alert" class="headerlink" title="(1) Alert"></a>(1) Alert</h3><ul><li><p>Alert 띄우기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drive.switch_to_window(main_window)</span><br><span class="line">drive.execute_script(<span class="string">"alert('이게 alert 로 뜰겁니다.');"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Alert 확인 누르기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to.alert</span><br><span class="line">alert.accept()</span><br></pre></td></tr></table></figure></li><li><p>Alert 창이 있으면 확인을 누르고, 없으면 없다고 리턴하기 (예외처리)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  alert = driver.switch_to.alert</span><br><span class="line">  alert.accept()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  print(<span class="string">"alert 가 없습니다."</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Confirm"><a href="#2-Confirm" class="headerlink" title="(2) Confirm"></a>(2) Confirm</h3><ul><li><p>Confirm 띄우기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">"confirm('이게 Confirm 창입니다.');"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Confirm 창 확인 누르기 or 취소 누르기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">confirm = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 확인</span></span><br><span class="line"><span class="comment"># confirm.accept()</span></span><br><span class="line"><span class="comment"># 취소</span></span><br><span class="line">confirm.dismiss()</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-입력창에-글씨-입력하기"><a href="#3-입력창에-글씨-입력하기" class="headerlink" title="3. 입력창에 글씨 입력하기"></a>3. 입력창에 글씨 입력하기</h2><ul><li>이제부터 Selenium을 통해 특정 html 의 element 에 액션을 주려면,<br>각종 Selector 를 사용하여 html 상의 element을 셀렉팅 하고, 해당 element 에게 액션을 주어야한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(nameof cssselector).send_keys(<span class="string">"입력할 내용"</span>)</span><br></pre></td></tr></table></figure><ul><li>.find_element_by_css_selector 와 <br><br>.find_<b>elements</b>_<br>by_css_selector 는 다르다.element 는 하나의 selector 만 선택하는 반면, elements 는 여러가지 element 를 셀렉팅 해서, 리스트 형식으로 Return 한다.</li><li>따라서 이렇게 리스트 형식으로 Return 이 된 경우, List[0] 등과 같이 그 엘리먼트를 뒤에 지정해줘야된다. 즉,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(nameof cssselector)</span><br><span class="line"><span class="comment">#위는 바로 selecting 이 된것이지만,</span></span><br><span class="line">driver.find_elements_by_css_selector(nameof cssselector)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#위는 뒤에 selecting 위해 list 의 요소를 선택 해주어야한다.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-버튼-클릭하기"><a href="#4-버튼-클릭하기" class="headerlink" title="4. 버튼 클릭하기"></a>4. 버튼 클릭하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위의 방법처럼, element 를 선택해준다.</span></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">"name of css selector"</span>).click()</span><br></pre></td></tr></table></figure><h2 id="5-id-class-그-외의-attribute-값을-selecting-하는-법"><a href="#5-id-class-그-외의-attribute-값을-selecting-하는-법" class="headerlink" title="5. id, class, 그 외의 attribute 값을 selecting 하는 법"></a>5. id, class, 그 외의 attribute 값을 selecting 하는 법</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(<span class="string">"name of css selector."</span>)click()</span><br><span class="line"><span class="comment"># id 의 경우 : #idname</span></span><br><span class="line"><span class="comment"># class 의 경우 : .classname</span></span><br><span class="line"><span class="comment"># 다른 attribute 의 경우 : [attribute = 'value']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Selenium&quot;&gt;&lt;a href=&quot;#Selenium&quot; class=&quot;headerlink&quot; title=&quot;Selenium&quot;&gt;&lt;/a&gt;Selenium&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;자동화 할 수 있는 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Insta
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
    
      <category term="Web, Crawling, Selenium" scheme="https://emjayahn.github.io/tags/Web-Crawling-Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Thread</title>
    <link href="https://emjayahn.github.io/2018/10/24/thread/"/>
    <id>https://emjayahn.github.io/2018/10/24/thread/</id>
    <published>2018-10-24T03:02:50.000Z</published>
    <updated>2018-10-24T14:54:22.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><ul><li>파이썬 기본 : Single Thread (Main Thread)</li><li>threading 모듈 : main thread에서 subthread 를 생성하여 진행하는 방식</li><li><p>multiprocessing 모듈 : double cpu</p></li><li><p>ThreadPoolExecutor : API - 멀티스레드와 멀티프로세스 동일한 형태로 디자인(Pool 클래스만 변경하면됨)</p></li></ul><h3 id="threading-Thread-arguement"><a href="#threading-Thread-arguement" class="headerlink" title="threading.Thread() arguement"></a>threading.Thread() arguement</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread(group=, target=, args= , kwargs=, *, daemon=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment">#target= : 실제 스레드에서 돌아가게 될 함수</span></span><br><span class="line"><span class="comment">#args= : tuple 로 target 함수에 들어가게될 argument</span></span><br><span class="line"><span class="comment">#kwargs= : dictionary로 target 함수에 들어가게될 argument</span></span><br><span class="line"><span class="comment">#daemon : 데몬 스레드로 돌아갈지 여부</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Thread 의 메소드</span></span><br><span class="line">start(): <span class="comment">#스레드의 실행, self 의 run() 메소드를 호출</span></span><br><span class="line">run(): <span class="comment">#스레드가 실제로 수행하게될 작업</span></span><br><span class="line">name : <span class="comment">#스레드의 이름</span></span><br><span class="line">threading.locals() : <span class="comment">#해당 스레드 내부에서 사용할 로컬 변수 지정</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;파이썬 기본 : Single Thread (Main Thread)&lt;/li&gt;
&lt;li&gt;th
      
    
    </summary>
    
      <category term="Python" scheme="https://emjayahn.github.io/categories/Python/"/>
    
    
      <category term="Thread" scheme="https://emjayahn.github.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>181024 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/24/181024-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/24/181024-TodayWhatILearned/</id>
    <published>2018-10-24T01:41:11.714Z</published>
    <updated>2018-10-24T14:53:10.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181024-TWIL"><a href="#181024-TWIL" class="headerlink" title="181024 TWIL"></a>181024 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>멀티스레딩으로 네이버 크롤링 코드 작성</li><li>오후 4시 스터디</li><li>확률 분포 공부</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>멀티스레딩 개념을 활용한 크롤링 코드 작성</li><li>오후 4시 스터디</li><li>확률분포 공부</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률분포 공부</li><li>프로젝트 모임</li><li>Pandas 정리해보기</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>Documentation 과 각종 개념 자료들을 혼자 보고 공부하면서, 파이썬이라는 언어가 단순히 책 한권 끝냈다고 해서 끝나는 언어가 아님을 깨달았다. 기본적인 문법을 금방 익숙해져서, ‘역시 쉬운 언어인가’라고 생각했다가 오늘 다양한 자료를 찾아보고 읽어보면서 언어 하나만해도 아직 공부할게 무궁무진 하다는 것을 깨달았다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181024-TWIL&quot;&gt;&lt;a href=&quot;#181024-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181024 TWIL&quot;&gt;&lt;/a&gt;181024 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="TWIL" scheme="https://emjayahn.github.io/categories/TWIL/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181023 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/23/181023-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/23/181023-TodayWhatILearned/</id>
    <published>2018-10-23T04:31:39.118Z</published>
    <updated>2018-10-24T14:53:07.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181023-TWIL"><a href="#181023-TWIL" class="headerlink" title="181023 TWIL"></a>181023 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>Queue 정리 하기</li><li>확률 분포 공부</li><li>&lt;스터디&gt;멀티 스레딩 개념을 포함한 네이버 크롤링 코드짜기</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>&lt;스터디&gt; 멀티 스레딩에 관해 이야기, 공부해볼 정보들 공유, 어떻게 코드를 구성할 것인지 의견을 나누었다.</li><li>Queue 개념 정리 및 코드 구현 연습</li><li>베르누이 분포, 이항분포 정리 및 Searching</li><li>블로그 수정</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>오후 4시 멀티 스레드 관련한 내용으로 온라인 스터디 모임 예정</li><li>멀티스레딩 개념을 활용한 네이버 크롤링 코드 짜기</li><li>각종 확률 분포 및 검정 부분까지 복습</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>오늘 공부한 testing 시작부분부터는 그간 배웠던 것을 한꺼번에 적용한다. 배웠던 여러가지 분포를 활용하여,<br>가설을 세우고 이 가설이 선택한 분포의 관점에서 봤을 떄, 가설을 선택할지 기각할지에 관한 내용은 점차<br>data를 통해 prediction 을 해가는 과정에 있는 듯한 느낌을 받았다.</li><li>아직 검정 과정과 앞으로 공부하게 될 여러가지 분석 모델을 이해하기에 앞서배운 확률분포 부분의 내용이<br>부족한듯하여, 계속 꾸준히 앞부분을 공부해야될 것 같다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181023-TWIL&quot;&gt;&lt;a href=&quot;#181023-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181023 TWIL&quot;&gt;&lt;/a&gt;181023 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="TWIL" scheme="https://emjayahn.github.io/categories/TWIL/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181022 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/22/181022-TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/22/181022-TodayWhatILearned/</id>
    <published>2018-10-21T23:22:41.104Z</published>
    <updated>2018-10-24T14:53:02.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181022-TWIL"><a href="#181022-TWIL" class="headerlink" title="181022 TWIL"></a>181022 TWIL</h1><h2 id="오늘-할-일은-무엇인가"><a href="#오늘-할-일은-무엇인가" class="headerlink" title="오늘 할 일은 무엇인가"></a>오늘 할 일은 무엇인가</h2><ol><li>블로그 테마 바꾸기</li><li>Selenium 과제 두번째 것 (17:47 - 19:00)</li><li>확률 분포 다시 한번 정리하기</li><li>데이터구조 (PseudoLinkedList, Stack, Queue)정리</li><li>새 맥북 환경 설정 조금씩 마저 더하기</li><li>DailyScrum Upload</li></ol><h2 id="오늘-한-일은-무엇인가"><a href="#오늘-한-일은-무엇인가" class="headerlink" title="오늘 한 일은 무엇인가"></a>오늘 한 일은 무엇인가</h2><ol><li>Selenium NBA Page Crawling 해서, DataFrame으로 정리 (17:47 - 18:55)</li><li>Stack 정리</li><li>Github 설정</li></ol><h2 id="내일-할-일은-무엇인가"><a href="#내일-할-일은-무엇인가" class="headerlink" title="내일 할 일은 무엇인가"></a>내일 할 일은 무엇인가</h2><ol><li>확률 분포 공부</li><li>Queue 정리</li></ol><h2 id="무엇을-느꼈는가"><a href="#무엇을-느꼈는가" class="headerlink" title="무엇을 느꼈는가"></a>무엇을 느꼈는가</h2><ul><li>맥북을 바꾸면서, 환경 설정하는데 너무 많은 시간이 든다. 틈틈히 하고 있는데도 아직 이전 맥북의 환경에서 100% 똑같은 환경을 만들지 못하고 있다. 장비를 바꿀 때, 혹은 다른 작업 환경에서 연속성을 이어 나가기 위해 나에게 맞는 환경설정도 정리할 필요성을 느낀다.</li><li>오늘 공부한 PseudoLinkedList, Stack, Queue 의 활용성에 대해 깊이 고민 해 볼 수 있어서 뿌듯하다. 특히나 PseudoLinkedList의 경우 내가 사용하지 않았던 자료구조나 class를 목적에 맞게 customize 할 수 있는 측면에서 활용성이 높다고 생각된다. 다른 사람이 작성한 class 를 잘 읽어보고, 그 활용도를 높이기 위해 overriding 하는 방법을 틈틈히 챙겨 봐야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181022-TWIL&quot;&gt;&lt;a href=&quot;#181022-TWIL&quot; class=&quot;headerlink&quot; title=&quot;181022 TWIL&quot;&gt;&lt;/a&gt;181022 TWIL&lt;/h1&gt;&lt;h2 id=&quot;오늘-할-일은-무엇인가&quot;&gt;&lt;a href=&quot;#오늘-할-
      
    
    </summary>
    
      <category term="TWIL" scheme="https://emjayahn.github.io/categories/TWIL/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
  <entry>
    <title>181019 TodayWhatILearned</title>
    <link href="https://emjayahn.github.io/2018/10/19/181019_TodayWhatILearned/"/>
    <id>https://emjayahn.github.io/2018/10/19/181019_TodayWhatILearned/</id>
    <published>2018-10-18T15:37:56.000Z</published>
    <updated>2018-10-24T14:52:39.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181019"><a href="#181019" class="headerlink" title="181019"></a>181019</h1><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ol><li>Web Crawling (Requests, BS4) 공부</li><li>Github 사용할 준비</li><li>GitPages 사용 방법</li><li>공부 했던 내용, 공부할 내용 어떻게 정리 할지 고민</li><li>프로젝트 팀 회의</li></ol><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ol><li>Pandas 내용 정리, 반복 숙달</li><li>수업 내용 복습</li><li>주말 공부할 내용 계획</li><li>코딩 습관을 기르기 위해 일일코딩과 TWIL에 대해 고민</li></ol><h2 id="뭘-느꼈는가"><a href="#뭘-느꼈는가" class="headerlink" title="뭘 느꼈는가"></a>뭘 느꼈는가</h2><ul><li>크롤링 코드를 보면서 공부하고, 또 다시 스스로 짜는 것을 연습하면서 내용의 개념과 코드 자체는 어려운 것이 없으나 BeautifulSoup 이나 Requests 패키지에 담겨있는 각 메서드 들의 종류, 기능, 메서드마다 들어가는 attribute를 참고 할 줄 알아야 된다고 느꼈다.</li><li>매우 기본적인 메서드들일 수 있기에 외워야 할 수도 있겠지만 (또한 반복한다면 숙달되겠지만) 잊어버렸을 때 각 라이브러리들의 Document들을 잘 볼 줄 아는 것이 중요하다고 느꼈다.</li><li>프로젝트 OT 를 한 만큼 본격적인 프로젝트를 진행하기에 앞서 꼼꼼히 준비해 나가야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;181019&quot;&gt;&lt;a href=&quot;#181019&quot; class=&quot;headerlink&quot; title=&quot;181019&quot;&gt;&lt;/a&gt;181019&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="TWIL" scheme="https://emjayahn.github.io/categories/TWIL/"/>
    
    
      <category term="TWIL" scheme="https://emjayahn.github.io/tags/TWIL/"/>
    
  </entry>
  
</feed>
